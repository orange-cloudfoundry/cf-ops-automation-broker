# Java Maven CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  build:
    working_directory: ~/cf-ops-automation-broker
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - attach_workspace:
          at: ~/cf-ops-automation-broker
      - run:
          name: Build
          environment:
          #Workaround OpenJdk8 regression which crashes JVM. See https://stackoverflow.com/a/53085816
          - _JAVA_OPTIONS: "-Djdk.net.URLClassPath.disableClassPathURLCheck=true"
          command: |
            mvn -q install:help --settings settings.xml
            mvn install --settings settings.xml
      # uploads the test metadata from the `target/surefire-reports` directory so that it can show up in the CircleCI dashboard.
      # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
      # See https://circleci.com/docs/2.0/collect-test-data/#maven-surefire-plugin-for-java-junit-results
      - run:
          name: Save test results
          # pending aggregation of multi modules report into a single html file
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/junit/ \;
            for f in $(find . -type f -regex ".*/target/site/.*.html"); do module=$(echo "$f" | cut -d "/" -f2); shortname=$(basename $f); cp $f ~/test-results/junit/${module}_${shortname}; done
          when: always
      - store_test_results:
          path: ~/test-results
#      - store_artifacts:
#          path: ~/test-results
      - run:
          name: save jar artefacts
          command: |
            mkdir -p ./artefacts/
            find . -path '**/target/*.jar' -exec cp {} ./artefacts/ \;
          when: always
      - store_artifacts:
          path: ./artefacts
      # run whitesource security scans on the built artefacts
      - run: ./whitesource-scan.sh -apiKey $WHITESOURCE_API_KEY -c whitesource_config.properties -project circle-ci_test -d ~/
      #- run: bash <(curl -s -L https://github.com/whitesource/unified-agent-distribution/raw/master/standAlone/wss_agent.sh) -apiKey $WHITESOURCE_API_KEY -c whitesource_config.properties -project circle-ci_test -d ~/
  build_n_deploy:
    working_directory: ~/cf-ops-automation-broker
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - attach_workspace:
          at: ~/cf-ops-automation-broker
      - run:
          name: building artefacts
          command: bin/package_artefacts.sh
      - run:
          name: save jar artefacts
          command: |
            mkdir -p ./artefacts/
            find . -path '**/target/*.jar' -exec cp {} ./artefacts/ \;
          when: always
      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/junit/ \;
          when: always
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ./artefacts
      - persist_to_workspace:
          root: .
          paths:
            - bin/create_github_release.sh
            - bin/upload_artefact_to_github.sh
            - artefacts/*
  release_to_github:
    working_directory: ~/cf-ops-automation-broker
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - attach_workspace:
          at: ~/cf-ops-automation-broker
      - run:
          name: create github release
          command: bin/create_github_release.sh github_api_token=$GITHUB_TOKEN owner=$CIRCLE_PROJECT_USERNAME repo=$CIRCLE_PROJECT_REPONAME tag=$CIRCLE_TAG
      - run:
          name: upload artefacts to github release
          command: |
            for f in ./artefacts/*
            do
              echo "Processing $f file..."
              # take action on each file.
              bin/upload_artefact_to_github.sh github_api_token=$GITHUB_TOKEN owner=$CIRCLE_PROJECT_USERNAME repo=$CIRCLE_PROJECT_REPONAME tag=$CIRCLE_TAG filename=$f
            done
workflows:
  version: 2
  build-n-deploy:
    jobs:
      - build:
          filters:
            tags:
              ignore: /.*/
      - build_n_deploy:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - release_to_github:
          requires:
            - build_n_deploy
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
