# suppress inspection "SpringBootApplicationProperties" for whole file
#cloudflare.maxExecutionDurationSeconds= 300

spring.security.user.name=user
spring.security.user.password=secret

git.paas-secret.user=anyUser
git.paas-secret.password=anyPassword
#A git server is dynamically started within unit tests and serves temporary repos created on demand
git.paas-secret.url=git://127.0.0.1:9418/paas-secrets.git
git.paas-secret.committerName= gitUserName
git.paas-secret.committerEmail= gitUserEmail
git.paas-secret.usePooling=true

# the max duration to perform retries for, else the execution will be failed.
git.paas-secret.retry.maxDurationMilliSeconds=60000
# when backoff is turned on, the max delay for each retries
git.paas-secret.retry.maxDelayMilliSeconds=60000
# the delay to occur between retries
git.paas-secret.retry.delayMilliSeconds=5000
# whether to exponentially increase delay at each retry by multiplying by 2
git.paas-secret.retry.exponentialBackOff=true
# max number of attempts
git.paas-secret.retry.maxAttempts=4


git.paas-template.user=anyUser
git.paas-template.password=anyPassword
#A git server is dynamically started within unit tests and serves temporary repos created on demand
git.paas-template.url=git://127.0.0.1:9418/paas-template.git
git.paas-template.committerName=gitUserName
git.paas-template.committerEmail=gitUserEmail

git.paas-template.createBranchIfMissing=feature-coadepls-cassandra-serviceinstances
git.paas-template.checkOutRemoteBranch=develop
git.paas-template.usePooling=true

# the max duration to perform retries for, else the execution will be failed.
git.paas-template.retry.maxDurationMilliSeconds=60000
# when backoff is turned on, the max delay for each retries
git.paas-template.retry.maxDelayMilliSeconds=60000
# the delay to occur between retries
git.paas-template.retry.delayMilliSeconds=5000
# whether to exponentially increase delay at each retry by multiplying by 2
git.paas-template.retry.exponentialBackOff=true
# max number of attempts
git.paas-template.retry.maxAttempts=4

# Message displayed when a plan upgrade request is rejected
# {0}: current/previous plan name
# {1}: request plan name
# {2}: List of supported plan upgrades from current/previous plane name
plans.upgrade.rejected-message-template=plan upgrade from {0} to {1} are not supported, please prefer creating a new Foo instance and export/import your data into it. List of supported plan upgrades from {0} is: {2}
# Matrix of supported plan upgrades.
# Note for maintainers: BoshServiceProvisionningTest needs them to be kept consistent with plan names in OsbBuilderHelper
plans.upgrade.supportedFromTo[small_plan_name][0]=medium_plan_name
plans.upgrade.supportedFromTo[small_plan_name][1]=large_plan_name
plans.upgrade.supportedFromTo[medium][0]=large_plan_name


pipeline.osbDelegateUser=user
pipeline.osbDelegatePassword=password
pipeline.maxExecutionDurationSeconds=1000
#{0} resolves to the cf service instance ID
#pipeline.brokerUrlPattern=https://cassandra-broker_{0}.mydomain/com
#8089 is wiremock server
pipeline.brokerUrlPattern=https://localhost:8089/

#Trace http client requests with nested Broker
logging.level.org.springframework.web.client.HttpMessageConverterExtractor=debug
logging.level.org.springframework.http.converter.json.MappingJackson2HttpMessageConverter=debug
#details on the CONFIG_YML environment variable
logging.level.com.orange.oss.cloudfoundry.broker.opsautomation.ondemandbroker.catalog=info
# Display retrier config
logging.level.com.orange.oss.cloudfoundry.broker.opsautomation.ondemandbroker.git.RetrierGitManager=debug
# Display async completion details
logging.level.com.orange.oss.cloudfoundry.broker.opsautomation.ondemandbroker.pipeline.PipelineCompletionTracker=debug
# Display coab-vars.yml dumps
#logging.level.com.orange.oss.cloudfoundry.broker.opsautomation.ondemandbroker.pipeline.VarsFilesYmlFormatter=debug

#For tests purposes only
logging.level.WireMock=debug

#turn on spring boot debugging to troubleshoot application context.
debug=true
logging.level.com.orange.oss.cloudfoundry.broker.opsautomation.ondemandbroker.osbclient.ServiceInstanceServiceClient=debug

# no associated traces ?
logging.level.org.springframework.cloud.servicebroker=debug

#Osb server traces
logging.level.org.springframework.cloud.servicebroker.controller=debug
#troubleshoot http security problems
#logging.level.org.springframework.security=DEBUG


#alias of the broker used in coa deployment names. Deployment names would be model-deployment-short-alias<service-instance-id>
deployment.model-deployment-short-alias=m
# used in git commit to identity the broker
deployment.broker-display-name=Mongo
# COA root deployment
#deployment.root-deployment=coab-depls
# relative path to the paas-template deployment model (ie. bosh manifest files)
deployment.model-deployment=mongodb

# Template for rendering a dashboard url using the following parameters
# {0}: service instance guid
# {1}: osb-cmdb brokered service instance guid passed as params.x-osb-cmdb.labels.brokered_service_instance_guid or "null" if missing
deployment.dashboard-url-template=https://grafana_{1}.redacted-ops-domain.com
#Note: the catalog is defined in catalog.yml
