# suppress inspection "SpringBootApplicationProperties" for whole file
#cloudflare.maxExecutionDurationSeconds= 300

spring.security.user.name=user
spring.security.user.password=secret

git.paas-secret.user=anyUser
git.paas-secret.password=anyPassword
#A git server is dynamically started within unit tests and serves temporary repos created on demand
git.paas-secret.url=git://127.0.0.1:9418/paas-secrets.git
git.paas-secret.committerName= gitUserName
git.paas-secret.committerEmail= gitUserEmail
git.paas-secret.usePooling=true


git.paas-template.user=anyUser
git.paas-template.password=anyPassword
#A git server is dynamically started within unit tests and serves temporary repos created on demand
git.paas-template.url=git://127.0.0.1:9418/paas-template.git
git.paas-template.committerName=gitUserName
git.paas-template.committerEmail=gitUserEmail

git.paas-template.createBranchIfMissing=feature-coadepls-cassandra-serviceinstances
git.paas-template.checkOutRemoteBranch=develop
git.paas-template.usePooling=true

pipeline.osbDelegateUser=user
pipeline.osbDelegatePassword=password
pipeline.maxExecutionDurationSeconds=1000
#{0} resolves to the cf service instance ID
#pipeline.brokerUrlPattern=https://cassandra-broker_{0}.mydomain/com
#8089 is wiremock server
pipeline.brokerUrlPattern=https://localhost:8089/

#Trace http client requests with nested Broker
logging.level.org.springframework.web.client.HttpMessageConverterExtractor: debug
logging.level.org.springframework.http.converter.json.MappingJackson2HttpMessageConverter: debug
#For tests purposes only
logging.level.WireMock=debug

#turn on spring boot debugging to troubleshoot application context.
debug=true
logging.level.com.orange.oss.cloudfoundry.broker.opsautomation.ondemandbroker.osbclient.ServiceInstanceServiceClient=debug

# no associated traces ?
logging.level.org.springframework.cloud.servicebroker=debug

#Osb server traces
logging.level.org.springframework.cloud.servicebroker.controller=debug
#troubleshoot http security problems
logging.level.org.springframework.security=DEBUG


#alias of the broker used in coa deployment names. Deployment names would be model-deployment-short-alias<service-instance-id>
deployment.model-deployment-short-alias=m
# used in git commit to identity the broker
deployment.broker-display-name=Mongo
# COA root deployment
#deployment.root-deployment=coab-depls
# relative path to the paas-template deployment model (ie. bosh manifest files)
deployment.model-deployment=mongodb

#Note: this catalog currently needs to be in sync with service definition id and plan id used in OsbBuilderHelper and its clients.

spring.cloud.openservicebroker.catalog.services[0].id=service_definition_id
spring.cloud.openservicebroker.catalog.services[0].name=cassandra-ondemand
spring.cloud.openservicebroker.catalog.services[0].description=On demand cassandra dedicated clusters
spring.cloud.openservicebroker.catalog.services[0].bindable=true
spring.cloud.openservicebroker.catalog.services[0].bindingsRetrievable=false
spring.cloud.openservicebroker.catalog.services[0].instancesRetrievable=false
spring.cloud.openservicebroker.catalog.services[0].planUpdateable=false
spring.cloud.openservicebroker.catalog.services[0].metadata[displayName]=ondemand
spring.cloud.openservicebroker.catalog.services[0].metadata[imageUrl]="https://orange.com/image.png"
spring.cloud.openservicebroker.catalog.services[0].metadata[longDescription]="A dedicated on-demand cassandra cluster"
spring.cloud.openservicebroker.catalog.services[0].metadata[providerDisplayName]="Orange"
spring.cloud.openservicebroker.catalog.services[0].metadata[documentationUrl]="https://orange.com/doc"
spring.cloud.openservicebroker.catalog.services[0].metadata[supportUrl]="https://orange.com/support"
spring.cloud.openservicebroker.catalog.services[0].requires[0]=syslog_drain
spring.cloud.openservicebroker.catalog.services[0].requires[1]=route_forwarding
spring.cloud.openservicebroker.catalog.services[0].tags[0]=ondemand
spring.cloud.openservicebroker.catalog.services[0].tags[1]=document
#spring.cloud.openservicebroker.catalog.services[0].dashboard-client.id=dashboard-id
#spring.cloud.openservicebroker.catalog.services[0].dashboard-client.secret=dashboard-secret
#spring.cloud.openservicebroker.catalog.services[0].dashboard-client.redirect-uri=dashboard-redirect-uri
spring.cloud.openservicebroker.catalog.services[0].plans[0].id=plan_id
spring.cloud.openservicebroker.catalog.services[0].plans[0].name=default
spring.cloud.openservicebroker.catalog.services[0].plans[0].description="This is a default ondemand plan.  All services are created equally."

spring.cloud.openservicebroker.catalog.services[0].plans[0].schemas.serviceinstance.create.parameters[$schema]=http://example.com/service/create/schema
spring.cloud.openservicebroker.catalog.services[0].plans[0].schemas.serviceinstance.create.parameters[type]=object
spring.cloud.openservicebroker.catalog.services[0].plans[0].schemas.serviceinstance.update.parameters[$schema]=http://example.com/service/update/schema
spring.cloud.openservicebroker.catalog.services[0].plans[0].schemas.serviceinstance.update.parameters[type]=object
spring.cloud.openservicebroker.catalog.services[0].plans[0].schemas.servicebinding.create.parameters[$schema]=http://example.com/service/create/schema
spring.cloud.openservicebroker.catalog.services[0].plans[0].schemas.servicebinding.create.parameters[type]=object
spring.cloud.openservicebroker.catalog.services[1].id=service-two-id
spring.cloud.openservicebroker.catalog.services[1].name=Service Two
spring.cloud.openservicebroker.catalog.services[1].description=Description for Service Two
spring.cloud.openservicebroker.catalog.services[1].plans[0].id=plan-one-id
spring.cloud.openservicebroker.catalog.services[1].plans[0].name=Plan One
spring.cloud.openservicebroker.catalog.services[1].plans[0].description=Description for Plan One
